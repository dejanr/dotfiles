# Shows branch/tag name on different SCM
showBranch () {
  if [`pwd | grep -i "work|sites|projects|code|src"` != ""]; then
    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/' | tr "\n" " "
  fi
}

# Git Commit pending changes and quote all args as message
function gg () {
  git commit -v -a -m "$*"
}

# Creates a directory and moves into it
function take () {
  mkdir -p $1;
  cd $1;
}

# Returns the word count for a given term on the current folder files
function wordcount () {
  grep -ir "$1" * | wc -l;
}

function generatessl() {
  openssl genrsa -out privatekey.pem 1024 && \
  openssl req -new -key privatekey.pem -out certrequest.csr  && \
  openssl x509 -req -in certrequest.csr -signkey privatekey.pem -out certificate.pem
}


# password generator
# Usage: genpass test.account.name
function genpass() {
  # apg -n 1 -a 0 -m 20 -x 30 -M NSCL
  pass=$(apg -n 1)
  echo -n $pass | xclip -selection clipboard
  if [ $# == 1 ]; then
    pass=$(encrypt "$pass")
    echo "$1	$pass" >> ~/.passwords.txt
    echo "password added to ~/.passwords.txt"
  fi
  echo "password copied to clipboard."
}

# password grabber
# Usage: getpass test.account.name
function getpass() {
  pass=$(showpass "$1")
  echo -n $pass | xclip -selection clipboard
  echo "password copied to clipboard."
}

# password display
# Usage: showpass test.account.name
function showpass() {
  pass=$(grep "$1	" ~/.passwords.txt | tail -n 1 | cut -f 2)
  pass=$(decrypt "$pass")
  echo "$pass"
}

function decrypt() {
  echo "$1" | openssl enc -aes-256-cbc -a -kfile ~/.ssh/id_rsa -d
}

function encrypt() {
  echo "$1" | openssl enc -aes-256-cbc -a -kfile ~/.ssh/id_rsa
}

# output git diff inside vim
function git_diff() {
	git diff --no-ext-diff -w "$@" | vim -R -
}

gifify() {
    if [[ -n "$1" && -n "$2" ]]; then
        ffmpeg -i $1 -pix_fmt rgb24 temp.gif
        convert -layers Optimize temp.gif $2
        rm temp.gif
    else
        echo "proper usage: gif-ify <input_movie.mov> <output_file.gif>. You DO need to include extensions."
    fi
}

# download site and all assets associated with it
wget-download-site() {
  wget --mirror --convert-links --backup-converted --adjust-extension $1
}

function load-time() {
    curl -s -w '\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nAppCon time:\t%{time_appconnect}\nRedirect time:\t%{time_redirect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null $1
}

function lb() {
    vim -c 'cd %:p:h' ~/Documents/logbook/$(date '+%Y-%m-%d').org
}
